@page "/UserDashboard"
@using Microsoft.AspNetCore.Components.QuickGrid

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

@inject ILogger<Dashboard> Logger
@inject RecordStore.RecordStore RecordStore


@using System.ComponentModel.DataAnnotations
@using FsCheck.Experimental
@using Microsoft.AspNetCore.Identity
@using Microsoft.FSharp.Collections
@using sharpinoBlazor.Components.Account
@using sharpinoBlazor.Data
@using sharpinoRecordStore
@using sharpinoRecordStore.models
@rendermode InteractiveServer

<authorizeView Context="authContext">
    @if (userId == Guid.Empty)
    {
        <p> loading </p>
    }
    else
    {
        <h3>My Items</h3>
        <div class="col-md-4">
            <QuickGrid Items="items.AsQueryable()" TGridItem="Item" class="table table-bordered table-striped" Pagination="Pagination">
                <PropertyColumn Property="f => f.Name" Title="Name" Sortable="true"/>
                <PropertyColumn Property="f => f.ItemType" Title="Type" Sortable="true"/>
                <TemplateColumn Title="Delete">
                    <TemplateContext>
                        @{
                            var item = context as Item;
                        }
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteItem(item.Id)">Delete</button>
                    </TemplateContext>
                </TemplateColumn>
            </QuickGrid>
            <Paginator State="Pagination"/>
            
            <h3>Add new Item</h3>
            <EditForm Model="@NewItem" FormName="add_new_item" OnValidSubmit="AddItem">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <div class="form-floating mb-3">
                    <input type="text" @bind="NewItem.Name" id="NewItem.Name" class="form-control" />
                    <label for="NewItem.Name" class="form-label">Name</label>
                </div>
                <div class="form-floating mb-3">
                    <select @bind="NewItem.Type" id="NewItem.Type" class="form-select">
                        @foreach (var type in itemTypes)
                        {
                            <option value="@type.ToString()">@type.ToString()</option>
                        }
                    </select>
                    <label for="NewItem.Type" class="form-label">Type</label>
                </div>
                <button type="submit" class="btn btn-primary">Add</button>
            </EditForm>
        </div>
    }
</authorizeView>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private FSharpList<ItemType> itemTypes = FSharpList<ItemType>.Empty;
    private FSharpList<Item> items = FSharpList<Item>.Empty;
    PaginationState? Pagination;

    private Guid userId = Guid.Empty;

    [SupplyParameterFromForm(FormName = "add_new_item")]
    private EditItem NewItem { get; set; } = new()
    {
        Name = String.Empty,
        Type = String.Empty
    };

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var strUserId = UserManager.GetUserId(authState.User);
        userId = Guid.Parse(strUserId);
        itemTypes = ItemType.GetAllTypes();
        Pagination = new PaginationState { ItemsPerPage = 10 };
        LoadItems();
    }
    
    protected async Task LoadItems()
    {
        var tryItems = await RecordStore.GetAllItemsOfUserAsync(userId);
        if (tryItems.IsError)
        {
            throw new Exception(tryItems.ErrorValue);
        }
        
        items = tryItems.ResultValue;
    }

    public class EditItem
    {
        [Required(ErrorMessage = "Name field cannot be empty")]
        public required string Name { get; set; }

        [Required(ErrorMessage = "Type field cannot be empty")]
        public required string Type { get; set; }
    }
    
    private async Task DeleteItem(Guid itemid)
    {
        var tryDelete = await RecordStore.DeleteItemByUserAsync(itemid, userId);
        if (tryDelete.IsError)
        {
            throw new Exception(tryDelete.ErrorValue);
        }
        await LoadItems(); 
    }

    private async Task AddItem()
    {
        var item = Item.Create(userId, NewItem.Name, ItemType.FromString(NewItem.Type));
        var tryCreate = await RecordStore.AddItemAsync(item);
        if (tryCreate.IsError)
        {
            throw new Exception(tryCreate.ErrorValue);
        }
        await LoadItems(); 
    }
}